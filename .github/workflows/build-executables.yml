name: Build wolfram-app-discovery executable

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The commit SHA or tag to build"
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:

    build-release-artifacts:

        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                build: [linux-gnu, linux-musl, linux-arm-gnu, macos-x86-64, macos-arm, win-msvc]
                include:
                -   build: linux-gnu
                    os: ubuntu-20.04
                    target: x86_64-unknown-linux-gnu

                -   build: linux-musl
                    os: ubuntu-20.04
                    target: x86_64-unknown-linux-musl

                -   build: linux-arm-gnu
                    os: ubuntu-20.04
                    target: aarch64-unknown-linux-gnu

                -   build: macos-x86-64
                    os: macos-12
                    target: x86_64-apple-darwin

                -   build: macos-arm
                    os: macos-12
                    target: aarch64-apple-darwin

                -   build: win-msvc
                    os: windows-2019
                    target: x86_64-pc-windows-msvc

        steps:
            -   uses: actions/checkout@v3
                with:
                    ref: ${{ github.event.inputs.ref }}

            -   name: Install Rust target
                run: rustup target add ${{ matrix.target }}

            -   name: Build ${{ matrix.build }}
                shell: bash
                run: |
                    # If building for ARM64 Linux, install an ARM64 linker,
                    # and set RUSTFLAGS so that cargo will use that linker.
                    if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
                        sudo apt install gcc-aarch64-linux-gnu
                        export RUSTFLAGS="-C linker=gcc-aarch64-linux-gnu"
                    fi

                    cargo build --release --features=cli --target ${{ matrix.target }} --verbose

            -   name: Construct platform release archive
                shell: bash
                run: |
                    staging="wolfram-app-discovery--${{ github.event.inputs.ref }}--${{ matrix.target}}"

                    mkdir -p "$staging"

                    cp {README.md,"docs/CommandLineHelp.md"} "$staging/"

                    # Copy the built wolfram-app-discovery program to $staging.
                    #
                    # On macOS and Linux cargo will generate an executable with the name
                    # `wolfram-app-discovery`. On Windows, it has the name `wolfram-app-discovery.exe`.
                    if [ "${{ matrix.os }}" = "windows-2019"]; then
                        cp "target/${{ matrix.target }}/release/wolfram-app-discovery.exe"  "$staging/"
                    else
                        cp "target/${{ matrix.target }}/release/wolfram-app-discovery"  "$staging/"
                    fi

                    # Compress the output archive ourselves, instead of letting
                    # action/upload-artifact do it for us, due to this issue:
                    #     https://github.com/actions/upload-artifact/issues/38
                    # Causing `wolfram-app-discovery` to lose its `+x` executable
                    # file mode flag.
                    if [ "${{ matrix.os }}" = "windows-2019"]; then
                        7z a "$staging.zip" "$staging"
                        echo "ARTIFACT=$staging.zip" >> $GITHUB_ENV
                    else
                        tar czf "$staging.tar.gz" "$staging"
                        echo "ARTIFACT=$staging.tar.gz" >> $GITHUB_ENV
                    fi

            -   name: Upload artifact
                uses: actions/upload-artifact@v3
                with:
                    name: wolfram-app-discovery--${{ github.event.inputs.ref }}--${{ matrix.target}}
                    path: ${{ env.ARTIFACT }}

